@page
@model LivinParisWebApp.Pages.Client.LivraisonClientModel
@{
    Layout = "~/Pages/Shared/_NavBarLayout.cshtml";
    ViewData["Title"] = "Livraison Client";
}

<head>
    <link rel="stylesheet" href="/css/site.css" />
    <link rel="stylesheet" href="https://unpkg.com/leaflet@1.9.4/dist/leaflet.css" crossorigin="" />
    <style>
        .title-livraison{
            height:10%;
            align-content:center;
            text-align:center;
            font-size: 2vw;
        }
        .ligne-commande-title{
            font-size: 1.5vw;
        }
        .info{
            font-size:1vw
        }
        .content-settings-client{
            height:85vh;
        }

        .carousel {
            display: flex;
            overflow: hidden;
            width: 90vw;
            margin-left:auto;
            margin-right:auto;
            height:70%;
            gap: 20px;
            scroll-snap-type: x mandatory;
            scroll-behavior: smooth;
            position: relative;
        }

        .slide {
            display:flex;
            flex: 0 0 100%;
            flex-direction:column;
            justify-content:space-around;
            scroll-snap-align: start;
            border-radius: 15px;
            background-color: rgba(255, 255, 255, 0.25);
            padding: 20px;

            .map{
                display:flex;
                height:70%;
            }

            p{
                display:flex;
            }
        }

        .caroussel-btns {
            height:10%;
            width:20%;
            margin-left:auto;
            margin-right:auto;
            display: flex;
            justify-content: center;
            gap: 20px;

            button{
                padding: 10px 15px;
                height: 60%;
                width: 10vw;
                font-size: 18px;
                cursor: pointer;
                background-color: #e0aaff;
                color: #fffefe;
                border: none;
                border-radius: 15px;
                font-size: 1.2vw;
                justify-content:center;
            }
        }


        .btn-group{
            height:10%;
            width:50%;
            display:flex;
            flex-direction:row;
            justify-content:space-around;
            margin-left:auto;
            margin-right:auto;
            
            button {
                height:50%;
                display: flex;
                width: 10vw;
                padding: 0.3rem 0.6rem;
                margin-bottom:auto;
                margin-top:auto;
                border-radius: 15px;
                font-size: 1.2vw;
                font-family: "Lilita One", sans-serif;
                cursor: pointer;
                background-color: #e0aaff;
                color: #fffefe;
                border: none;
                align-items:center;
                justify-content: center;

                p{
                    display: flex;
                    font-size: 1rem;
                }
            }

            .violet{
                background-color: #5a189a;
            }
        }

        a.leaflet-control-zoom-in,
        a.leaflet-control-zoom-out {
            background-color: #7b2cbf;
            font-size: 22px;
            border: none;
            box-shadow: 0 0 5px rgba(0,0,0,0.5);
            transition: all 0.2s ease-in-out

            span{
                color: #fffefe;
            }
        }

        a.leaflet-control-zoom-in:hover,
        a.leaflet-control-zoom-out:hover {
            background-color: #e0aaff;
            cursor: pointer;
        }

    </style>
</head>

<div class="content-settings-client">
    <p class="title-livraison">Aperçu des livraisons</p>

    <div class="carousel" id="carousel">
        @for (int i = 0; i < Model.Chemins.Count; i++)
        {
            <div class="slide">
                <p class="ligne-commande-title">Ligne de commande @(@i + 1)</p>
                <div class="map" id="map-@i" style="width: 100%;"></div>
                <p class="info">Distance estimée : @Math.Round(Model.DistancesKm[i], 2) km</p>
                <p class="info">Temps estimé : @Math.Round(Model.DistancesKm[i] / 20 * 60) min</p>
                <p class="info">Prix de la ligne : @Model.PrixParLigne[i] €</p>
                <p class="info">Stations traversées : @string.Join(" → ", Model.StationsTraversees[i])</p>
            </div>
        }
    </div>

    <div class="caroussel-btns">
        <button onclick="prevSlide()">⬅️</button>
        <button onclick="nextSlide()">➡️</button>
    </div>

    <form method="post" class="btn-group">
        <button class="btn-confirm" type="submit" asp-page-handler="Confirm"><p>Confirmer</p></button>
        <button class="btn-back violet" type="submit" asp-page-handler="Retour"><p>Retour</p></button>
    </form>
</div>

@section Scripts {
    <script src="https://unpkg.com/leaflet@1.9.4/dist/leaflet.js" crossorigin=""></script>
    <script>
        const chemins = @Html.Raw(Json.Serialize(Model.Chemins));
            console.log(chemins)

        chemins.forEach((chemin, index) => {
            const map = L.map(`map-${index}`).setView([48.8566, 2.3522], 12);

            L.tileLayer('https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png', {
                attribution: '© OpenStreetMap'
            }).addTo(map);

            const latlngs = chemin.map(s => [s.latitude, s.longitude]);
            console.log(latlngs);
            L.polyline(latlngs, {
                color: 'black',
                weight: 5
            }).addTo(map);

            map.fitBounds(L.polyline(latlngs).getBounds());
        });

        let currentIndex = 0;
        function nextSlide() {
            const carousel = document.getElementById('carousel');
            if (currentIndex < @Model.Chemins.Count - 1) {
                currentIndex++;
                carousel.scrollTo({ left: carousel.offsetWidth * currentIndex, behavior: 'smooth' });
            }
        }

        function prevSlide() {
            const carousel = document.getElementById('carousel');
            if (currentIndex > 0) {
                currentIndex--;
                carousel.scrollTo({ left: carousel.offsetWidth * currentIndex, behavior: 'smooth' });
            }
        }
    </script>
}
