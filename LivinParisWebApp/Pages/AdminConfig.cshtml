@page
@model LivinParisWebApp.Pages.AdminConfigModel
@{
	Layout = "~/Pages/Shared/_LayoutVoidNavBar.cshtml";
	ViewData["Title"] = "Panel Admin";
}
<head>
	<link rel="stylesheet" href="/css/site.css" />
</head>

<div>
	<form method="post">
		<button type="submit" asp-page-handler="LoadStationInBDD">Charger la BDD avec les stations</button>
		<button type="submit" asp-page-handler="DeleteContenuStations">Vider la table Station</button>
		<button type="submit" asp-page-handler="GenererGraphe">Générer le graphe</button>
		<button type="submit" asp-page-handler="GenererGraphe2">Générer le graphe 2</button>
	</form>
</div>

<div class="img-container">
	<p>Visualisation du graphe complet du projet</p>

	<div class="flex-container">
		<div class="map-container">
			<div id="map"></div>
		</div>
		<div class="graph2-container">
			<div id="graph2"></div>
		</div>
	</div>
</div>

<style>
	.flex-container {
		display: flex;
		justify-content: flex-start;
		align-items: flex-start;
		gap: 5px;
		overflow-x: auto; 
		padding: 20px; 
	}

	.map-container {
		width: 1300px; /* Plus large que avant (par exemple 1200px) */
		height: 700px;
		border-radius: 10px;
		overflow: hidden;
		background-color: white;
	}

	.graph2-container {
		width: 900px; 
		height: 1100px;
		border-radius: 10px;
		overflow: hidden;
		background-color: white;
	}
	#map, #graph2 {
		width: 100%;
		height: 100%;
	}
</style>



@section Scripts {
	<script src="https://unpkg.com/leaflet@1.9.4/dist/leaflet.js" crossorigin=""></script>

	<script src="https://d3js.org/d3.v7.min.js"></script>


	<script>
		const ligneColors = {
			1: "#FFCD00", 
			2: "#003CA6", 
			3: "#837902", 
			"3bis": "#6EC4E8",
			4: "#CF009E", 
			5: "#FF7E2E", 
			6: "#6ECEB2", 
			7: "#F5A9BB",
			"7bis": "#6ECA97", 
			8: "#E19BDF", 
			9: "#B6BD00", 
			10: "#C9910D",
			11: "#704B1C", 
			12: "#007852", 
			13: "#99D4E4", 
			14: "#62259D"
		};

		const chemin = @Html.Raw(Model.CheminJson)
		// console.log("Chemin JS :", chemin);

		const stations = @Html.Raw(ViewData["Stations"])
		// console.log("Stations :", stations);

		const arcs = @Html.Raw(ViewData["Arcs"])
		// console.log("Arcs :", arcs);

		//carte
		const map = L.map('map').setView([48.8566, 2.3522], 12);
		L.tileLayer('https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png', {
			attribution: '© OpenStreetMap contributors'
		}).addTo(map);

		//Ajout des stations
		const stationMap = {};
		stations.forEach(st => {
			stationMap[st.id] = st;

			const marker = L.circleMarker([st.Latitude, st.Longitude], {
				radius: 5,
				fillColor: "#ff5e5e",
				color: "#000",
				weight: 1,
				opacity: 0.8,
				fillOpacity: 0.8
			}).addTo(map);
			marker.bindPopup(`<strong>${st.nom}</strong><br/>ID: ${st.id}`);
		});

		// Ajout des arcs
		arcs.forEach(arc => {
			const srcLat = arc.SourceLat;
			const srcLong = arc.SourceLong;
			const destLat = arc.DestLat;
			const destLong = arc.DestLong;
			const ligne = arc.Ligne;

			const color = ligneColors[ligne] || "#000";

			L.polyline([
				[srcLat, srcLong],
				[destLat, destLong]
			], {
				color: color,
				weight: 4,
				opacity: 0.8
			}).addTo(map);
		});

		// Affichage du chemin trouvé en noir
		if (chemin && chemin.length > 1) {
			console.log("Coordonnées utilisées dans latlngs :", chemin.map(s => [s.Latitude, s.Longitude]));

			const latlngs = chemin.map(s => [parseFloat(s.Latitude), parseFloat(s.Longitude)]);

			L.polyline(latlngs, {
				color: 'black',
				weight: 6,
				opacity: 0.9
			}).addTo(map);
			//si on veut centrer sur le chemin dijsktra
			// map.fitBounds(L.polyline(latlngs).getBounds());
		} else {
			console.log("Aucun chemin trouvé ou chemin trop court.");
		}
    </script>

		<script>
		const nodes = @Html.Raw(ViewData["NoeudsJson"]);  
		const links = @Html.Raw(ViewData["LiensJson"]);  

		const width = 900;
		const height = 1100;

		const svg = d3.select("#graph2")
			.append("svg")
			.attr("width", width)
			.attr("height", height);

		const color = d3.scaleOrdinal()
			.domain(["Client", "Commande", "Plat", "Cuisinier"])
			.range(["#ff7f0e", "#1f77b4", "#2ca02c", "#d62728"]);

		const simulation = d3.forceSimulation(nodes)
			.force("link", d3.forceLink(links).id(d => d.id).distance(100)) 
			.force("charge", d3.forceManyBody().strength(-300)) 
			.force("center", d3.forceCenter(width / 2, height / 2)); 

		const link = svg.append("g")
			.attr("stroke", "#aaa")
			.selectAll("line")
			.data(links)
			.join("line")
			.attr("stroke-width", 2);

		const node = svg.append("g")
			.selectAll("circle")
			.data(nodes)
			.join("circle")
			.attr("r", 10)
			.attr("fill", d => color(d.group))
			.call(drag(simulation));

		const label = svg.append("g")
			.selectAll("text")
			.data(nodes)
			.join("text")
			.text(d => `${d.group}:${d.id}`)
			.attr("font-size", 12)
			.attr("dx", 12)
			.attr("dy", ".35em");

		simulation.on("tick", () => {
			link
				.attr("x1", d => d.source.x)
				.attr("y1", d => d.source.y)
				.attr("x2", d => d.target.x)
				.attr("y2", d => d.target.y);

			node
				.attr("cx", d => d.x)
				.attr("cy", d => d.y);

			label
				.attr("x", d => d.x)
				.attr("y", d => d.y);
		});

		function drag(simulation) {
			return d3.drag()
				.on("start", event => {
					if (!event.active) simulation.alphaTarget(0.3).restart();
					event.subject.fx = event.subject.x;
					event.subject.fy = event.subject.y;
				})
				.on("drag", event => {
					event.subject.fx = event.x;
					event.subject.fy = event.y;
				})
				.on("end", event => {
					if (!event.active) simulation.alphaTarget(0);
					event.subject.fx = null;
					event.subject.fy = null;
				});
		}

        </script>
}