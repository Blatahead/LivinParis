@page
@model LivinParisWebApp.Pages.AdminConfigModel
@{
	Layout = "~/Pages/Shared/_LayoutVoidNavBar.cshtml";
	ViewData["Title"] = "Panel Admin";
}
<head>
	<link rel="stylesheet" href="/css/site.css" />
</head>
<div class="admin-container">
	<div class="top">
		<div class="formulaire-container">
			<form method="post" class="formulaire-btns">
				<button type="submit" asp-page-handler="LoadStationInBDD"><p>Charger la BDD avec les stations</p></button>
				<button type="submit" asp-page-handler="DeleteContenuStations"><p>Vider la table Station</p></button>
				<button type="submit" asp-page-handler="GenererGraphe"><p>Générer le graphe</p></button>
				<button type="submit" asp-page-handler="GenererGraphe2"><p>Générer le graphe 2</p></button>
				<button type="submit" asp-page-handler="VoidBDD"><p>Vider la BDD pour rendu final</p></button>
				<button type="submit" asp-page-handler="XmlSerializer_1"><p>Passer en XML</p></button>
				<button type="submit" asp-page-handler="JsonSerializer_1"><p>Passer en Json</p></button>
				
			</form>
		</div>
		<div class="stats-container">
			<p class="stats-title">Statistiques de la base de données</p>
			<div class="stats">
				<div class="nb-cmd stat">
					<p class="stat-title rose">Nombre de commandes totales du site : </p>
					<p style="margin-left:10px;">@ViewData["NbCommandesTotales"]</p>
				</div>
				<div class="client-cmd stat">
					<p class="stat-title rose">Clients avec + de 2 commandes :</p>
					@if (Model.ClientsActifs.Any())
					{
						foreach (var item in Model.ClientsActifs)
						{
							<p style="margin-left:10px;">@item.Nb_commandes commande(s)</p>
						}
					}
					else
					{
						<p style="margin-left:10px;">Aucun</p>
					}
				</div>
				<div class="cuis-dispo stat">
					<p class="stat-title rose">Cuisiniers du site :</p>
					@foreach (var item in Model.CuisiniersDispos)
					{
						<p style="margin-left:10px;">@item.ID_cuisinier</p>
					}
				</div>
				<div class="best-plat stat">
					<p class="stat-title rose">Plat le plus commandé :</p>
					@if (Model.PlatLePlusCommande?.Any() == true)
					{
						var plat = Model.PlatLePlusCommande.First();
						<span style="margin-left:10px;">@plat.Nom (@plat.Fois_commande fois)</span>
					}
					else
					{
						<span style="margin-left:10px;">Aucun plat trouvé</span>
					}
				</div>
				<div class="cmd-sans-plat stat">
					<p class="stat-title rose">Commandes avec plats >15€ :</p>
					@if (Model.CommandesSansPlatAbordable.Count == 1 && Model.CommandesSansPlatAbordable[0].ID_commande == -1)
					{
						<p style="margin-left:10px;">Aucune</p>
					}
					else
					{
						foreach (var item in Model.CommandesSansPlatAbordable)
						{
							<p style="margin-left:10px;">Commande @item.ID_commande</p>
						}
					}
				</div>
				<div class="cuis-sans-cmd stat">
					<p class="stat-title rose">Cuisiniers sans commande :</p>
					@foreach (var item in Model.CuisiniersDispos)
					{
						<p style="margin-left:10px;">@item.ID_cuisinier</p>
					}
				</div>
				<div class="stat">
					<p class="stat-title rose">Paniers validés : </p>
					<p style="margin-left:10px;">@ViewData["NbPaniers"]</p>
				</div>
				<div class="stat">
					<p class="stat-title rose">Total des transactions : </p>
					<p style="margin-left:10px;">@ViewData["ArgentTotal"] €</p>
				</div>
				<div class="stat">
					<p class="stat-title rose">Temps total de livraison : </p>
					<p style="margin-left:10px;">@ViewData["TempsLivraison"] min</p>
				</div>
				<div class="stat">
					<p class="stat-title rose">Distance totale parcourue : </p>
					<p style="margin-left:10px;">@ViewData["DistanceTotale"] km</p>
				</div>
				<div class="stat">
					<p class="stat-title rose">Nombre total de plats livrés : </p>
					<p style="margin-left:10px;">@ViewData["NbPlats"]</p>
				</div>
				<div class="stat">
					<p class="stat-title rose">Nombre de clients sur le site : </p>
					<p style="margin-left:10px;">@ViewData["NbClients"]</p>
				</div>
			</div>
		</div>
	</div>
	<div class="bottom">
		<div class="img-container">
			<div class="graphe-dijkstra">
				<p>Visualisation du graphe complet + 1 chemin Dijkstra</p>
				<div class="map-container">
					<div id="map"></div>
				</div>
			</div>
			<div class="graphe-coloration">
				<p>Coloration Welsh-Powell (Clients-Cuisinier-Commandes)</p>
				<div class="map-container">
					<div id="map2"></div>
				</div>
			</div>
		</div>
	</div>
</div>

@section Scripts {
	<script src="https://unpkg.com/leaflet@1.9.4/dist/leaflet.js" crossorigin=""></script>

	<script src="https://d3js.org/d3.v7.min.js"></script>

	<script>
		const ligneColors = {
			1: "#FFCD00", 
			2: "#003CA6", 
			3: "#837902", 
			"3bis": "#6EC4E8",
			4: "#CF009E", 
			5: "#FF7E2E", 
			6: "#6ECEB2", 
			7: "#F5A9BB",
			"7bis": "#6ECA97", 
			8: "#E19BDF", 
			9: "#B6BD00", 
			10: "#C9910D",
			11: "#704B1C", 
			12: "#007852", 
			13: "#99D4E4", 
			14: "#62259D"
		};


		const chemin = @Html.Raw(Model.CheminJson)
		const stations = @Html.Raw(ViewData["Stations"])
		const arcs = @Html.Raw(ViewData["Arcs"])
		const map = L.map('map').setView([48.8566, 2.3522], 12);
		L.tileLayer('https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png', {
			attribution: '© OpenStreetMap contributors'
		}).addTo(map);
		const stationMap = {};
		stations.forEach(st => {
			stationMap[st.id] = st;

			const marker = L.circleMarker([st.Latitude, st.Longitude], {
				radius: 5,
				fillColor: "#ff5e5e",
				color: "#000",
				weight: 1,
				opacity: 0.8,
				fillOpacity: 0.8
			}).addTo(map);
			marker.bindPopup(`<strong>${st.nom}</strong><br/>ID: ${st.id}`);
		});

		arcs.forEach(arc => {
			const srcLat = arc.SourceLat;
			const srcLong = arc.SourceLong;
			const destLat = arc.DestLat;
			const destLong = arc.DestLong;
			const ligne = arc.Ligne;

			const color = ligneColors[ligne] || "#000";

			L.polyline([
				[srcLat, srcLong],
				[destLat, destLong]
			], {
				color: color,
				weight: 4,
				opacity: 0.8
			}).addTo(map);
		});
		if (chemin && chemin.length > 1) {
			const latlngs = chemin.map(s => [parseFloat(s.Latitude), parseFloat(s.Longitude)]);

			L.polyline(latlngs, {
				color: 'black',
				weight: 6,
				opacity: 0.9
			}).addTo(map);
			//si on veut centrer sur le chemin dijsktra
			// map.fitBounds(L.polyline(latlngs).getBounds());
		} else {
			console.log("Aucun chemin trouvé ou chemin trop court.");
		}
		var clients = @Html.Raw(ViewData["Clients"]);
		var cuisiniers = @Html.Raw(ViewData["Cuisiniers"]);
	 	function ajouterMarqueur(lat, lng, texte) {
	 		L.marker([lat, lng]).addTo(map).bindPopup(texte);
		}
	 	clients.forEach(function (client) {
	 		ajouterMarqueur(client.latitude, client.longitude, "Client ID: " + client.id);
	 	});
	 	cuisiniers.forEach(function (cuisinier) {
	 		ajouterMarqueur(cuisinier.latitude, cuisinier.longitude, "Cuisinier ID: " + cuisinier.id);
	 	});
    </script>

	<script>
		const map2 = L.map('map2').setView([48.8566, 2.3522], 12); 
		L.tileLayer('https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png', {
			attribution: '© OpenStreetMap contributors'
		}).addTo(map2);
		const noeuds = @Html.Raw(ViewData["NoeudsJson"]);
		const liens = @Html.Raw(ViewData["LiensJson"]);
		const couleurs = {
			"Client": "#ff7f0e",
			"Commande": "#1f77b4",
			"Plat": "#2ca02c",
			"Cuisinier": "#d62728"
		};

		function decalerCoordonnees(lat, lon, index = 1) {
			const angle = Math.random() * 2 * Math.PI; 
			const rayon = 0.005;
			return [
				lat + rayon * Math.cos(angle),
				lon + rayon * Math.sin(angle)
			];
		}
		const noeudMap = {};
		const platsAssocies = new Set(
			liens
				.filter(link => link.label === "contient" && link.target.startsWith("Plat:"))
				.map(link => link.target)
		);

		const commandeCoords = {};
		liens.forEach(link => {
			if (link.label === "a commandé" && link.source.startsWith("Client") && link.target.startsWith("Commande")) {
				const commandeId = link.target;
				const client = noeuds.find(n => n.id === link.source);

				const platsAssocies = liens
					.filter(l => l.label === "contient" && l.source === commandeId)
					.map(l => noeuds.find(n => n.id === l.target))
					.filter(Boolean);

				if (client && platsAssocies.length > 0) {
					let latSum = client.latitude;
					let lonSum = client.longitude;

					for (const plat of platsAssocies) {
						latSum += plat.latitude;
						lonSum += plat.longitude;
					}

					const count = platsAssocies.length + 1;
					let lat = latSum / count;
					let lon = lonSum / count;
					const firstPlat = platsAssocies[0];
					if (firstPlat) {
						const dx = firstPlat.longitude - client.longitude;
						const dy = firstPlat.latitude - client.latitude;
						const length = Math.sqrt(dx * dx + dy * dy);
						if (length > 0) {
							const offset = 0.005;
							const ox = -dy / length;
							const oy = dx / length;

							lat += offset * oy;
							lon += offset * ox;
						}
					}

					commandeCoords[commandeId] = { lat, lon };
				}
			}
		});

		noeuds.forEach((n, i) => {
			if (n.latitude !== 0 && n.longitude !== 0) {
				let lat = n.latitude;
				let lon = n.longitude;

				if (n.type === "Commande") {
					const coords = commandeCoords[n.id];
					if (coords) {
						lat = coords.lat;
						lon = coords.lon;
					} else {
						[lat, lon] = decalerCoordonnees(lat, lon, i);
					}
				}

				if (n.type === "Plat") {
					const angle = (i * 2 * Math.PI) / noeuds.length;
					const rayon = 0.01; 

					if (platsAssocies.has(n.id)) {
						lat = n.latitude + rayon * Math.cos(angle);
						lon = n.longitude + rayon * Math.sin(angle);
					} else {
						lat = n.latitude - rayon * Math.cos(angle);
						lon = n.longitude - rayon * Math.sin(angle);
					}
				}


				const marker = L.circleMarker([lat, lon], {
					radius: 6,
					color: "#000",
					fillColor: couleurs[n.type] || "#666",
					fillOpacity: 0.9,
					weight: 1
				}).addTo(map2);
				marker.bindPopup(`${n.type} : ${n.id}`);
				noeudMap[n.id] = [lat, lon];
			}
		});

		liens.forEach(link => {
			console.log(link)
			const src = noeudMap[link.source];
			const dest = noeudMap[link.target];

			if (!src || !dest) {
				console.warn("Lien ignoré : ", link);
			} else {
				L.polyline([src, dest], {
					color: "#000",
					weight: 2,
					opacity: 0.6
				}).addTo(map2);
			}
		});

	</script>
}