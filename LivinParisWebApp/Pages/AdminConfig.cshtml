@page
@model LivinParisWebApp.Pages.AdminConfigModel
@{
	Layout = "~/Pages/Shared/_LayoutVoidNavBar.cshtml";
	ViewData["Title"] = "Panel Admin";
}
<head>
	<link rel="stylesheet" href="/css/site.css" />
</head>

<div>
	<form method="post">
		<button type="submit" asp-page-handler="LoadStationInBDD">Charger la BDD avec les stations</button>
		<button type="submit" asp-page-handler="DeleteContenuStations">Vider la table Station</button>
		<button type="submit" asp-page-handler="GenererGraphe">Générer le graphe</button>
		<button type="submit" asp-page-handler="VoidBDD">Vider la BDD pour rendu final</button>
	</form>
</div>

<div class="img-container">
	<p>Visualisation du graphe complet du projet</p>
	<div id="map" style="height: 600px; width: 100%; border-radius: 10px;"></div>
</div>

@section Scripts {
	<script src="https://unpkg.com/leaflet@1.9.4/dist/leaflet.js" crossorigin=""></script>

	<script>
		const ligneColors = {
			1: "#FFCD00", 
			2: "#003CA6", 
			3: "#837902", 
			"3bis": "#6EC4E8",
			4: "#CF009E", 
			5: "#FF7E2E", 
			6: "#6ECEB2", 
			7: "#F5A9BB",
			"7bis": "#6ECA97", 
			8: "#E19BDF", 
			9: "#B6BD00", 
			10: "#C9910D",
			11: "#704B1C", 
			12: "#007852", 
			13: "#99D4E4", 
			14: "#62259D"
		};

		const chemin = @Html.Raw(Model.CheminJson)
		// console.log("Chemin JS :", chemin);

		const stations = @Html.Raw(ViewData["Stations"])
		// console.log("Stations :", stations);

		const arcs = @Html.Raw(ViewData["Arcs"])
		// console.log("Arcs :", arcs);

		//carte
		const map = L.map('map').setView([48.8566, 2.3522], 12);
		L.tileLayer('https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png', {
			attribution: '© OpenStreetMap contributors'
		}).addTo(map);

		//Ajout des stations
		const stationMap = {};
		stations.forEach(st => {
			stationMap[st.id] = st;

			const marker = L.circleMarker([st.Latitude, st.Longitude], {
				radius: 5,
				fillColor: "#ff5e5e",
				color: "#000",
				weight: 1,
				opacity: 0.8,
				fillOpacity: 0.8
			}).addTo(map);
			marker.bindPopup(`<strong>${st.nom}</strong><br/>ID: ${st.id}`);
		});

		// Ajout des arcs
		arcs.forEach(arc => {
			const srcLat = arc.SourceLat;
			const srcLong = arc.SourceLong;
			const destLat = arc.DestLat;
			const destLong = arc.DestLong;
			const ligne = arc.Ligne;

			const color = ligneColors[ligne] || "#000";

			L.polyline([
				[srcLat, srcLong],
				[destLat, destLong]
			], {
				color: color,
				weight: 4,
				opacity: 0.8
			}).addTo(map);
		});

		// Affichage du chemin trouvé en noir
		if (chemin && chemin.length > 1) {
			console.log("Coordonnées utilisées dans latlngs :", chemin.map(s => [s.Latitude, s.Longitude]));

			const latlngs = chemin.map(s => [parseFloat(s.Latitude), parseFloat(s.Longitude)]);

			L.polyline(latlngs, {
				color: 'black',
				weight: 6,
				opacity: 0.9
			}).addTo(map);
			//si on veut centrer sur le chemin dijsktra
			// map.fitBounds(L.polyline(latlngs).getBounds());
		} else {
			console.log("Aucun chemin trouvé ou chemin trop court.");
		}
	</script>
}